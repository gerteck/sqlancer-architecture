
    var pageVueRenderFn = function anonymous(
) {
with(this){return _c('div',{attrs:{"id":"app"}},[_c('header',{attrs:{"sticky":""}},[_c('navbar',{attrs:{"type":"dark"},scopedSlots:_u([{key:"brand",fn:function(){return [_c('a',{staticClass:"navbar-brand",attrs:{"href":"/sqlancer-architecture/index.html","title":"Home"}},[_v("SQLancer Main")])]},proxy:true}])},[_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/sqlancer-architecture/databaseProvider.html"}},[_v("DatabaseProvider")])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/sqlancer-architecture/globalState.html"}},[_v("GlobalState")])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/sqlancer-architecture/query.html"}},[_v("Query, SQLQueryAdapter")])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/sqlancer-architecture/statementExecutor.html"}},[_v("StatementExecutor")])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/sqlancer-architecture/SQLite.html"}},[_v("SQLite")])])])],1),_v(" "),_c('div',{attrs:{"id":"flex-body"}},[_c('div',{attrs:{"id":"content-wrapper"}},[_m(0),_v(" "),_m(1),_v(" "),_c('div',{directives:[{name:"mermaid",rawName:"v-mermaid"}],staticClass:"mermaid"},[_v("\nsequenceDiagram\n    participant DBMSExecutor\n    participant DatabaseProvider\n    participant GlobalState\n    participant QueryManager\n    participant StateLogger\n    participant Reproducer\n\n    DBMSExecutor->>DatabaseProvider: createDatabase(globalState)\n    DatabaseProvider->>GlobalState: Initialize database\n    DatabaseProvider-->>DBMSExecutor: Return connection\n    DBMSExecutor->>DatabaseProvider: generateAndTestDatabase(globalState)\n    DatabaseProvider->>QueryManager: Execute queries\n    QueryManager->>StateLogger: Log queries and results\n    alt If bug is found\n        DatabaseProvider->>Reproducer: Create reproducer\n        DatabaseProvider-->>DBMSExecutor: Return reproducer\n    end\n")]),_v(" "),_m(2),_v(" "),_c('p',[_v("The ProviderAdapter class is an abstract base class that implements the DatabaseProvider interface and provides common functionality for managing databases, test oracles, and query plan guidance (QPG). It is designed to be extended by DBMS-specific implementations (e.g., MySQL, PostgreSQL).")]),_v(" "),_c('div',{directives:[{name:"mermaid",rawName:"v-mermaid"}],staticClass:"mermaid"},[_v("\nsequenceDiagram\n    participant DBMSExecutor\n    participant ProviderAdapter\n    participant GlobalState\n    participant TestOracle\n    participant QueryManager\n    participant StateLogger\n    participant Reproducer\n\n    DBMSExecutor->>ProviderAdapter: generateAndTestDatabase(globalState)\n    ProviderAdapter->>GlobalState: generateDatabase()\n    ProviderAdapter->>GlobalState: checkViewsAreValid()\n    ProviderAdapter->>QueryManager: incrementCreateDatabase()\n    ProviderAdapter->>ProviderAdapter: getTestOracle(globalState)\n    ProviderAdapter->>TestOracle: create(globalState)\n    TestOracle-->>ProviderAdapter: Return oracle\n    loop For each query\n        ProviderAdapter->>TestOracle: check()\n        TestOracle->>StateLogger: Log query and result\n        alt If bug is found\n            TestOracle->>Reproducer: Create reproducer\n            Reproducer-->>ProviderAdapter: Return reproducer\n        end\n    end\n    ProviderAdapter-->>DBMSExecutor: Return reproducer (if bug found)\n")]),_v(" "),_m(3),_v(" "),_m(4),_v(" "),_m(5),_v(" "),_c('p',[_v("The SQLProviderAdapter class is an abstract base class that extends ProviderAdapter and provides SQL-specific functionality for managing databases, views, and logging. It is designed to be extended by DBMS-specific implementations (e.g., MySQL, PostgreSQL).")]),_v(" "),_c('div',{directives:[{name:"mermaid",rawName:"v-mermaid"}],staticClass:"mermaid"},[_v("\nsequenceDiagram\n    participant DBMSExecutor\n    participant SQLProviderAdapter\n    participant GlobalState\n    participant SQLQueryAdapter\n    participant StateLogger\n\n    DBMSExecutor->>SQLProviderAdapter: checkViewsAreValid(globalState)\n    SQLProviderAdapter->>GlobalState: getSchema().getViews()\n    GlobalState-->>SQLProviderAdapter: Return list of views\n    loop For each view\n        SQLProviderAdapter->>SQLQueryAdapter: new SQLQueryAdapter(\"SELECT 1 FROM view LIMIT 1\")\n        SQLProviderAdapter->>SQLQueryAdapter: execute(globalState)\n        alt If view is invalid\n            SQLProviderAdapter->>SQLProviderAdapter: dropView(globalState, viewName)\n            SQLProviderAdapter->>SQLQueryAdapter: new SQLQueryAdapter(\"DROP VIEW viewName\")\n            SQLProviderAdapter->>GlobalState: executeStatement(dropViewQuery)\n        end\n    end\n    SQLProviderAdapter-->>DBMSExecutor: Views validated or dropped\n")])]),_v(" "),_c('overlay-source',{attrs:{"id":"page-nav","tag-name":"nav","to":"page-nav"}},[_c('div',{staticClass:"nav-component slim-scroll"})]),_v(" "),_c('scroll-top-button')],1)])}
};
    var pageVueStaticRenderFns = [function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"databaseprovider"}},[_v("DatabaseProvider"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#databaseprovider","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("The DatabaseProvider interface is a core component of SQLancer, defining the contract for DBMS-specific implementations (e.g., MySQL, PostgreSQL). It provides methods for "),_c('strong',[_v("creating databases, generating and testing queries, and managing logging and reproducibility")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"provideradapter"}},[_v("ProviderAdapter"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#provideradapter","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('h4',{attrs:{"id":"generatedatabase"}},[_v("generateDatabase()"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#generatedatabase","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("This method is implemented by specific database implementations, but look at how it is implemented for SQLite ("),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("SQLite3Provider.generateDatabase()")]),_v("). (In SQLite Tab)")])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"sqlprovideradapter"}},[_v("SQLProviderAdapter"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#sqlprovideradapter","onclick":"event.stopPropagation()"}})])}
}];
  