
    var pageVueRenderFn = function anonymous(
) {
with(this){return _c('div',{attrs:{"id":"app"}},[_c('header',{attrs:{"sticky":""}},[_c('navbar',{attrs:{"type":"dark"},scopedSlots:_u([{key:"brand",fn:function(){return [_c('a',{staticClass:"navbar-brand",attrs:{"href":"/sqlancer-architecture/index.html","title":"Home"}},[_v("SQLancer Main")])]},proxy:true}])},[_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/sqlancer-architecture/databaseProvider.html"}},[_v("DatabaseProvider")])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/sqlancer-architecture/globalState.html"}},[_v("GlobalState")])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/sqlancer-architecture/query.html"}},[_v("Query, SQLQueryAdapter")])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/sqlancer-architecture/statementExecutor.html"}},[_v("StatementExecutor")])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/sqlancer-architecture/SQLite.html"}},[_v("SQLite")])])])],1),_v(" "),_c('div',{attrs:{"id":"flex-body"}},[_c('div',{attrs:{"id":"content-wrapper"}},[_m(0),_v(" "),_c('p',[_v("First let's look at the main entry point and core logic for SQLancer. Test DBMS by generating random SQL queries and databases to check for bugs or inconsistencies in DBMS.")]),_v(" "),_m(1),_v(" "),_m(2),_v(" "),_c('br'),_v(" "),_m(3),_v(" "),_c('div',{directives:[{name:"mermaid",rawName:"v-mermaid"}],staticClass:"mermaid"},[_v("\nsequenceDiagram\n    participant Main\n    participant JCommander\n    participant ServiceLoader\n    participant DBMSExecutorFactory\n    participant DBMSExecutor\n    participant ExecutorService\n\n    Main->>JCommander: Parse command-line arguments\n    JCommander-->>Main: Return parsed options\n    Main->>ServiceLoader: Load DBMS providers\n    ServiceLoader-->>Main: Return list of providers\n    Main->>DBMSExecutorFactory: Create executor factory for selected DBMS\n    DBMSExecutorFactory-->>Main: Return executor factory\n    Main->>ExecutorService: Initialize thread pool\n    loop For each test case\n        Main->>DBMSExecutorFactory: Create DBMSExecutor\n        DBMSExecutorFactory-->>Main: Return DBMSExecutor\n        Main->>DBMSExecutor: Run test case (see Diagram 2)\n    end\n    Main->>ExecutorService: Shutdown thread pool\n    ExecutorService-->>Main: Confirm shutdown\n")]),_v(" "),_c('br'),_v(" "),_m(4),_v(" "),_m(5),_v(" "),_c('div',{directives:[{name:"mermaid",rawName:"v-mermaid"}],staticClass:"mermaid"},[_v("\nsequenceDiagram\n    participant DBMSExecutor\n    participant GlobalState\n    participant DatabaseProvider\n    participant StateLogger\n    participant QueryManager\n    participant Reducer\n\n    DBMSExecutor->>GlobalState: Initialize global state\n    DBMSExecutor->>DatabaseProvider: Create database\n    DatabaseProvider-->>DBMSExecutor: Return database connection\n    DBMSExecutor->>StateLogger: Initialize logger\n    DBMSExecutor->>QueryManager: Initialize query manager\n    loop For each query\n        QueryManager->>DatabaseProvider: Execute query\n        DatabaseProvider-->>QueryManager: Return query result\n        QueryManager->>StateLogger: Log query and result\n    end\n    alt If bug is found\n        DBMSExecutor->>Reducer: Reduce test case\n        Reducer-->>DBMSExecutor: Return minimized test case\n        DBMSExecutor->>StateLogger: Log reduced test case\n    end\n")]),_v(" "),_c('p',[_v("Here is a class diagram for the main class.")]),_v(" "),_c('pic',{attrs:{"src":"/sqlancer-architecture/assets/main_class.bmp","width":"900"}})],1),_v(" "),_c('scroll-top-button')],1)])}
};
    var pageVueStaticRenderFns = [function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"sqlancer-main"}},[_v("SQLancer  Main."),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#sqlancer-main","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"key-components"}},[_c('strong',[_v("Key Components")]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#key-components","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Main")]),_v(" class serves as the entry point, parsing command-line arguments, initializing DBMS providers, and managing concurrent test execution. The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("StateLogger")]),_v(" handles logging of queries, errors, and test details to files, while the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("QueryManager")]),_v(" executes SQL queries, tracks success/failure, and logs results. The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("DBMSExecutor")]),_v(" tests specific DBMSs by initializing databases, generating random queries, and ensuring reproducibility with fixed random seeds. The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("DatabaseProvider")]),_v(" interface is implemented by DBMS-specific providers (e.g., MySQLProvider) to manage databases, generate queries, and handle configurations. The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("GlobalState")]),_v(" represents the database and test case state, including the database name, random seed, connection, and schema. The workflow involves parsing arguments, configuring test parameters, generating and executing random queries, and logging results. If a bug is found, a reducer minimizes the test case for debugging. Progress monitoring tracks query execution, database creation, and success rates. Concurrency is achieved via a thread pool, and reproducibility is ensured through fixed random seeds. Example usage: "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("java -jar sqlancer.jar mysql --num-tries 100 --num-threads 4 --log-each-select")]),_v(" tests MySQL with 100 cases, 4 threads, and logs each query.")])}
},function anonymous(
) {
with(this){return _c('h4',{attrs:{"id":"main-class"}},[_v("Main Class"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#main-class","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("Running the tests for each DBMS is done through "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("DBMSExecutor.run()")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('h3',{attrs:{"id":"dbmsexecutor-run"}},[_v("DBMSExecutor.run()"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#dbmsexecutor-run","onclick":"event.stopPropagation()"}})])}
}];
  